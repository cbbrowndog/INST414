{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04b275fe-1816-4538-9881-a23b9385714c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4540173-0de2-49f4-ae1a-f8fc8f66a98a",
   "metadata": {},
   "outputs": [],
   "source": [
    "columns_to_keep = [\"LOCATION\", \"ISSUE_TIME\", \"ISSUING_AGENCY_NAME\", \"VIOLATION_PROCESS_DESC\", \"ACCIDENT_INDICATOR\", \"FINE_AMOUNT\", \"TOTAL_PAID\"]\n",
    "\n",
    "df = pd.read_csv(\"Moving_Violations_Issued_in_October_2024.csv\",\n",
    "                 usecols=columns_to_keep,\n",
    "                 dtype={\"FINE_AMOUNT\": \"float64\", \"TOTAL_PAID\": \"float64\"},\n",
    "                 low_memory=False)\n",
    "\n",
    "df = df[df[\"ACCIDENT_INDICATOR\"].isin([\"Y\", \"N\"])] #ONLY INCLUDE ROWS WHERE ACCIDENT INDICATOR IS PRESENT\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d529fd77-ac32-4d7f-a102-a01b044f9782",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Count violations with and without accidents\n",
    "violation_accident_counts = df.groupby([\"VIOLATION_PROCESS_DESC\", \"ACCIDENT_INDICATOR\"]).size().unstack()\n",
    "\n",
    "# Fill missing values with 0\n",
    "violation_accident_counts = violation_accident_counts.fillna(0)\n",
    "\n",
    "# Calculate accident rate for each violation type\n",
    "violation_accident_counts[\"Accident Rate (%)\"] = (\n",
    "    violation_accident_counts[\"Y\"] / (violation_accident_counts[\"Y\"] + violation_accident_counts[\"N\"]) * 100\n",
    ")\n",
    "\n",
    "# Add a new column to count total violations for each violation type\n",
    "violation_accident_counts[\"Total Violations\"] = violation_accident_counts[\"Y\"] + violation_accident_counts[\"N\"]\n",
    "\n",
    "# Filter out violations with a low total count (e.g., fewer than 3 total occurrences)\n",
    "filtered_violation_accident_counts = violation_accident_counts[violation_accident_counts[\"Total Violations\"] >= 3]\n",
    "\n",
    "# Sort by highest accident rate, using the filtered version\n",
    "filtered_violation_accident_counts = filtered_violation_accident_counts.sort_values(\"Accident Rate (%)\", ascending=False)\n",
    "\n",
    "print(filtered_violation_accident_counts.head(20))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "458e3914-e96a-454a-8157-255da8d6c507",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Select top violations most associated with accidents (filtered)\n",
    "top_violations_filtered = filtered_violation_accident_counts.head(15)\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.barh(top_violations_filtered.index, top_violations_filtered[\"Accident Rate (%)\"], color='red')\n",
    "plt.xlabel(\"Accident Rate (%)\")\n",
    "plt.ylabel(\"Violation Type\")\n",
    "plt.title(\"Top Traffic Violations Most Associated with Accidents in Washington DC Ob\")\n",
    "plt.gca().invert_yaxis()  # Reverse order for readability\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e237821f-0cfd-4747-8dc6-7397c67d47a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Filter out these  violations because they are already accidents\n",
    "excluded_violations = [\n",
    "\"COLLIDING WITH FIXED OBJECT W/NO DAMAGE OR INJURY\",\n",
    "\"COLLIDING WITH PEDESTRIAN\"\n",
    "]\n",
    "\n",
    "filtered_violation_accident_counts = filtered_violation_accident_counts.loc[\n",
    "    ~filtered_violation_accident_counts.index.isin(excluded_violations)\n",
    "]\n",
    "\n",
    "# Print nicely formatted table\n",
    "print(filtered_violation_accident_counts.head(10).to_string(index=True, float_format=\"{:.2f}\".format))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a119ef85-d892-4708-9d18-1cb7e9eb5e51",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9dd8ed42-ce4d-4747-8bfa-f33cbed4341a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
