{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "735cfa87-36c5-4f32-abc8-0e680ff3f971",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import necessary libraries\n",
    "import pandas as pd                 #for data manipulation\n",
    "import numpy as np                  #for numerical operations\n",
    "from sklearn.model_selection import train_test_split  # For splitting the dataset\n",
    "\n",
    "#ff you haven't already installed this package, you can uncomment this and run it in a notebook cell:\n",
    "#!pip install ucimlrepo\n",
    "\n",
    "from ucimlrepo import fetch_ucirepo  #to fetch datasets from the UCI Machine Learning Repository\n",
    "\n",
    "from sklearn.tree import DecisionTreeClassifier      #decision Tree model\n",
    "from sklearn.metrics import accuracy_score           #to evaluate model performance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d272e957-48b7-4f4d-96ef-b4ba9a2e827f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#fetch the Breast Cancer Wisconsin (Diagnostic) dataset (ID: 17 in UCI ML Repo)\n",
    "breast_cancer = fetch_ucirepo(id=17)\n",
    "\n",
    "#extract features (X) and target (y) \n",
    "X = breast_cancer.data.features\n",
    "y = breast_cancer.data.targets\n",
    "\n",
    "#convert target values to binary numeric format: 'M' (malignant) -> 1, 'B' (benign) -> 0\n",
    "y = y.replace({'M': 1, 'B': 0})\n",
    "\n",
    "#split the data into training and testing sets (80% train, 20% test), set random_state for reproducibility\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, random_state=42\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f70efbef-e847-4bec-8b3c-a7847e1abbef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max_depth = 1 | Test Accuracy: 0.89\n",
      "max_depth = 2 | Test Accuracy: 0.93\n",
      "max_depth = 3 | Test Accuracy: 0.95\n",
      "max_depth = 4 | Test Accuracy: 0.95\n",
      "max_depth = 5 | Test Accuracy: 0.95\n",
      "max_depth = 6 | Test Accuracy: 0.94\n",
      "max_depth = 7 | Test Accuracy: 0.95\n",
      "max_depth = 8 | Test Accuracy: 0.95\n",
      "max_depth = 9 | Test Accuracy: 0.95\n",
      "max_depth = 10 | Test Accuracy: 0.95\n"
     ]
    }
   ],
   "source": [
    "#try different max_depth values for the Decision Tree to evaluate performance\n",
    "for depth in range(1, 11):\n",
    "    #create a DecisionTreeClassifier with a specific max_depth\n",
    "    clf = DecisionTreeClassifier(max_depth=depth, random_state=42)\n",
    "    \n",
    "    #train the classifier on training data\n",
    "    clf.fit(X_train, y_train)\n",
    "    \n",
    "    #predict the labels on the test set\n",
    "    y_pred = clf.predict(X_test)\n",
    "    \n",
    "    #calculate the accuracy of the predictions\n",
    "    test_accuracy = accuracy_score(y_test, y_pred)\n",
    "    \n",
    "    #print test accuracy for each depth\n",
    "    print(f\"max_depth = {depth} | Test Accuracy: {test_accuracy:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5dac8bf5-8272-42df-a0d1-874e6ae42db3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#select the best-performing depth (based on previous loop results)\n",
    "best_depth = 4\n",
    "\n",
    "#train a final Decision Tree using that depth\n",
    "final_clf = DecisionTreeClassifier(max_depth=best_depth, random_state=42)\n",
    "final_clf.fit(X_train, y_train)\n",
    "\n",
    "#predict the labels on the test set\n",
    "y_pred = final_clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5786f5fc-73d3-46b9-bf68-b5aeaafe3359",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Misclassified Samples ---\n",
      "Total Misclassified: 6\n",
      "\n",
      "Index: 8\n",
      "Predicted: 1, Actual: [0]\n",
      "Feature values:\n",
      "radius1                13.340000\n",
      "texture1               15.860000\n",
      "perimeter1             86.490000\n",
      "area1                 520.000000\n",
      "smoothness1             0.107800\n",
      "compactness1            0.153500\n",
      "concavity1              0.116900\n",
      "concave_points1         0.069870\n",
      "symmetry1               0.194200\n",
      "fractal_dimension1      0.069020\n",
      "radius2                 0.286000\n",
      "texture2                1.016000\n",
      "perimeter2              1.535000\n",
      "area2                  12.960000\n",
      "smoothness2             0.006794\n",
      "compactness2            0.035750\n",
      "concavity2              0.039800\n",
      "concave_points2         0.013830\n",
      "symmetry2               0.021340\n",
      "fractal_dimension2      0.004603\n",
      "radius3                15.530000\n",
      "texture3               23.190000\n",
      "perimeter3             96.660000\n",
      "area3                 614.900000\n",
      "smoothness3             0.153600\n",
      "compactness3            0.479100\n",
      "concavity3              0.485800\n",
      "concave_points3         0.170800\n",
      "symmetry3               0.352700\n",
      "fractal_dimension3      0.101600\n",
      "Name: 81, dtype: float64\n",
      "----------------------------------------\n",
      "Index: 20\n",
      "Predicted: 0, Actual: [1]\n",
      "Feature values:\n",
      "radius1                13.800000\n",
      "texture1               15.790000\n",
      "perimeter1             90.430000\n",
      "area1                 584.100000\n",
      "smoothness1             0.100700\n",
      "compactness1            0.128000\n",
      "concavity1              0.077890\n",
      "concave_points1         0.050690\n",
      "symmetry1               0.166200\n",
      "fractal_dimension1      0.065660\n",
      "radius2                 0.278700\n",
      "texture2                0.620500\n",
      "perimeter2              1.957000\n",
      "area2                  23.350000\n",
      "smoothness2             0.004717\n",
      "compactness2            0.020650\n",
      "concavity2              0.017590\n",
      "concave_points2         0.009206\n",
      "symmetry2               0.012200\n",
      "fractal_dimension2      0.003130\n",
      "radius3                16.570000\n",
      "texture3               20.860000\n",
      "perimeter3            110.300000\n",
      "area3                 812.400000\n",
      "smoothness3             0.141100\n",
      "compactness3            0.354200\n",
      "concavity3              0.277900\n",
      "concave_points3         0.138300\n",
      "symmetry3               0.258900\n",
      "fractal_dimension3      0.103000\n",
      "Name: 73, dtype: float64\n",
      "----------------------------------------\n",
      "Index: 46\n",
      "Predicted: 1, Actual: [0]\n",
      "Feature values:\n",
      "radius1                 9.295000\n",
      "texture1               13.900000\n",
      "perimeter1             59.960000\n",
      "area1                 257.800000\n",
      "smoothness1             0.137100\n",
      "compactness1            0.122500\n",
      "concavity1              0.033320\n",
      "concave_points1         0.024210\n",
      "symmetry1               0.219700\n",
      "fractal_dimension1      0.076960\n",
      "radius2                 0.353800\n",
      "texture2                1.130000\n",
      "perimeter2              2.388000\n",
      "area2                  19.630000\n",
      "smoothness2             0.015460\n",
      "compactness2            0.025400\n",
      "concavity2              0.021970\n",
      "concave_points2         0.015800\n",
      "symmetry2               0.039970\n",
      "fractal_dimension2      0.003901\n",
      "radius3                10.570000\n",
      "texture3               17.840000\n",
      "perimeter3             67.840000\n",
      "area3                 326.600000\n",
      "smoothness3             0.185000\n",
      "compactness3            0.209700\n",
      "concavity3              0.099960\n",
      "concave_points3         0.072620\n",
      "symmetry3               0.368100\n",
      "fractal_dimension3      0.089820\n",
      "Name: 520, dtype: float64\n",
      "----------------------------------------\n",
      "Index: 77\n",
      "Predicted: 0, Actual: [1]\n",
      "Feature values:\n",
      "radius1                13.960000\n",
      "texture1               17.050000\n",
      "perimeter1             91.430000\n",
      "area1                 602.400000\n",
      "smoothness1             0.109600\n",
      "compactness1            0.127900\n",
      "concavity1              0.097890\n",
      "concave_points1         0.052460\n",
      "symmetry1               0.190800\n",
      "fractal_dimension1      0.061300\n",
      "radius2                 0.425000\n",
      "texture2                0.809800\n",
      "perimeter2              2.563000\n",
      "area2                  35.740000\n",
      "smoothness2             0.006351\n",
      "compactness2            0.026790\n",
      "concavity2              0.031190\n",
      "concave_points2         0.013420\n",
      "symmetry2               0.020620\n",
      "fractal_dimension2      0.002695\n",
      "radius3                16.390000\n",
      "texture3               22.070000\n",
      "perimeter3            108.100000\n",
      "area3                 826.000000\n",
      "smoothness3             0.151200\n",
      "compactness3            0.326200\n",
      "concavity3              0.320900\n",
      "concave_points3         0.137400\n",
      "symmetry3               0.306800\n",
      "fractal_dimension3      0.079570\n",
      "Name: 255, dtype: float64\n",
      "----------------------------------------\n",
      "Index: 82\n",
      "Predicted: 0, Actual: [1]\n",
      "Feature values:\n",
      "radius1                14.480000\n",
      "texture1               21.460000\n",
      "perimeter1             94.250000\n",
      "area1                 648.200000\n",
      "smoothness1             0.094440\n",
      "compactness1            0.099470\n",
      "concavity1              0.120400\n",
      "concave_points1         0.049380\n",
      "symmetry1               0.207500\n",
      "fractal_dimension1      0.056360\n",
      "radius2                 0.420400\n",
      "texture2                2.220000\n",
      "perimeter2              3.301000\n",
      "area2                  38.870000\n",
      "smoothness2             0.009369\n",
      "compactness2            0.029830\n",
      "concavity2              0.053710\n",
      "concave_points2         0.017610\n",
      "symmetry2               0.024180\n",
      "fractal_dimension2      0.003249\n",
      "radius3                16.210000\n",
      "texture3               29.250000\n",
      "perimeter3            108.400000\n",
      "area3                 808.900000\n",
      "smoothness3             0.130600\n",
      "compactness3            0.197600\n",
      "concavity3              0.334900\n",
      "concave_points3         0.122500\n",
      "symmetry3               0.302000\n",
      "fractal_dimension3      0.068460\n",
      "Name: 86, dtype: float64\n",
      "----------------------------------------\n",
      "Index: 108\n",
      "Predicted: 1, Actual: [0]\n",
      "Feature values:\n",
      "radius1                14.440000\n",
      "texture1               15.180000\n",
      "perimeter1             93.970000\n",
      "area1                 640.100000\n",
      "smoothness1             0.099700\n",
      "compactness1            0.102100\n",
      "concavity1              0.084870\n",
      "concave_points1         0.055320\n",
      "symmetry1               0.172400\n",
      "fractal_dimension1      0.060810\n",
      "radius2                 0.240600\n",
      "texture2                0.739400\n",
      "perimeter2              2.120000\n",
      "area2                  21.200000\n",
      "smoothness2             0.005706\n",
      "compactness2            0.022970\n",
      "concavity2              0.031140\n",
      "concave_points2         0.014930\n",
      "symmetry2               0.014540\n",
      "fractal_dimension2      0.002528\n",
      "radius3                15.850000\n",
      "texture3               19.850000\n",
      "perimeter3            108.600000\n",
      "area3                 766.900000\n",
      "smoothness3             0.131600\n",
      "compactness3            0.273500\n",
      "concavity3              0.310300\n",
      "concave_points3         0.159900\n",
      "symmetry3               0.269100\n",
      "fractal_dimension3      0.076830\n",
      "Name: 148, dtype: float64\n",
      "----------------------------------------\n"
     ]
    }
   ],
   "source": [
    "#create a list to store indices where predictions were incorrect\n",
    "misclassified_indices = []\n",
    "\n",
    "#loop through each prediction and compare with actual label\n",
    "for i in range(len(y_pred)):\n",
    "    if y_pred[i] != y_test.values[i]:\n",
    "        misclassified_indices.append(i)\n",
    "\n",
    "#print details of each misclassified sample\n",
    "print(\"\\n--- Misclassified Samples ---\")\n",
    "print(f\"Total Misclassified: {len(misclassified_indices)}\\n\")\n",
    "\n",
    "for idx in misclassified_indices:\n",
    "    print(f\"Index: {idx}\")\n",
    "    print(f\"Predicted: {y_pred[idx]}, Actual: {y_test.values[idx]}\")\n",
    "    print(\"Feature values:\")\n",
    "    print(X_test.iloc[idx])\n",
    "    print(\"-\" * 40)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "24705a57-8652-4c30-a7ab-bd4ad7041abc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "114\n"
     ]
    }
   ],
   "source": [
    "#printing the number of values in the test set \n",
    "print(len(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "346abfda-f3e4-4cea-b40c-77ea733ebdb0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                    Benign Average  Malignant Average\n",
      "radius1                  12.146524          17.462830\n",
      "texture1                 17.914762          21.604906\n",
      "perimeter1               78.075406         115.365377\n",
      "area1                   462.790196         978.376415\n",
      "smoothness1               0.092478           0.102898\n",
      "compactness1              0.080085           0.145188\n",
      "concavity1                0.046058           0.160775\n",
      "concave_points1           0.025717           0.087990\n",
      "symmetry1                 0.174186           0.192909\n",
      "fractal_dimension1        0.062867           0.062680\n",
      "radius2                   0.284082           0.609083\n",
      "texture2                  1.220380           1.210915\n",
      "perimeter2                2.000321           4.323929\n",
      "area2                    21.135148          72.672406\n",
      "smoothness2               0.007196           0.006780\n",
      "compactness2              0.021438           0.032281\n",
      "concavity2                0.025997           0.041824\n",
      "concave_points2           0.009858           0.015060\n",
      "symmetry2                 0.020584           0.020472\n",
      "fractal_dimension2        0.003636           0.004062\n",
      "radius3                  13.379801          21.134811\n",
      "texture3                 23.515070          29.318208\n",
      "perimeter3               87.005938         141.370330\n",
      "area3                   558.899440        1422.286321\n",
      "smoothness3               0.124959           0.144845\n",
      "compactness3              0.182673           0.374824\n",
      "concavity3                0.166238           0.450606\n",
      "concave_points3           0.074444           0.182237\n",
      "symmetry3                 0.270246           0.323468\n",
      "fractal_dimension3        0.079442           0.091530\n"
     ]
    }
   ],
   "source": [
    "#create a copy of the feature data\n",
    "df = X.copy()\n",
    "#add target column\n",
    "df['target'] = y \n",
    "\n",
    "#split dataframe into two, one for benign and one for malignant\n",
    "benign_df = df[df['target'] == 0]\n",
    "malignant_df = df[df['target'] == 1]\n",
    "\n",
    "#calculate the average feature values for each tumor\n",
    "benign_avg = benign_df.drop(columns=['target']).mean()  \n",
    "malignant_avg = malignant_df.drop(columns=['target']).mean()\n",
    "\n",
    "#combine the averages into a dataframe to print side by side\n",
    "comparison_df = pd.DataFrame({\n",
    "    'Benign Average': benign_avg,\n",
    "    'Malignant Average': malignant_avg\n",
    "})\n",
    "\n",
    "#print the side-by-side comparison\n",
    "print(comparison_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "79d80e71-5ed2-42c0-aa67-c12d52e59b7c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
