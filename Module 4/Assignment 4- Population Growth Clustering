{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "42e98c14-507e-41ce-805f-c6ed892a49ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import packages \n",
    "import pandas as pd\n",
    "from sklearn.cluster import KMeans \n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "56286f8d-12ef-4a44-af37-effe11912dbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# read population data, skipping the first 13 rows of metadata and setting the index to first column\n",
    "population_df = pd.read_csv(\"PopulationNew.csv\", skiprows=13, index_col=0)\n",
    "\n",
    "#print(population_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e55752f0-732e-46bc-aa62-459932de8773",
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove commas and convert to float\n",
    "population_df = population_df.replace({',': ''}, regex=True)  # Remove commas\n",
    "population_df = population_df.astype(float)  # Convert to float"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b8b12de4-6085-481e-9ee0-606837834392",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                       g2025  g2026  g2027  g2028  g2029  g2030  g2031  g2032  \\\n",
      "Country                                                                         \n",
      "Canada                  0.70   0.68   0.66   0.64   0.62   0.60   0.57   0.55   \n",
      "United States           0.66   0.65   0.64   0.62   0.61   0.59   0.58   0.56   \n",
      "Mexico                  0.77   0.81   0.80   0.79   0.78   0.77   0.76   0.74   \n",
      "Antigua and Barbuda     1.11   1.08   1.06   1.03   1.00   0.97   0.94   0.91   \n",
      "Bahamas                 1.08   1.08   1.07   1.05   1.03   1.01   0.99   0.95   \n",
      "...                      ...    ...    ...    ...    ...    ...    ...    ...   \n",
      "São Tomé and Principe   1.41   1.39   1.38   1.36   1.34   1.31   1.30   1.29   \n",
      "Tanzania                2.74   2.71   2.68   2.66   2.63   2.60   2.58   2.55   \n",
      "Uganda                  3.21   3.16   3.11   3.06   3.01   2.96   2.91   2.86   \n",
      "Zambia                  2.85   2.81   2.78   2.75   2.71   2.68   2.64   2.61   \n",
      "Zimbabwe                1.88   1.82   1.79   1.76   1.74   1.71   1.69   1.67   \n",
      "\n",
      "                       g2033  g2034  \n",
      "Country                              \n",
      "Canada                  0.54   0.52  \n",
      "United States           0.54   0.53  \n",
      "Mexico                  0.72   0.70  \n",
      "Antigua and Barbuda     0.87   0.84  \n",
      "Bahamas                 0.92   0.88  \n",
      "...                      ...    ...  \n",
      "São Tomé and Principe   1.28   1.27  \n",
      "Tanzania                2.52   2.49  \n",
      "Uganda                  2.82   2.77  \n",
      "Zambia                  2.57   2.53  \n",
      "Zimbabwe                1.65   1.63  \n",
      "\n",
      "[180 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "# select columns where the column name contains 'g' and the year is greater than or equal to 2025\n",
    "\n",
    "columns_to_use = [col for col in population_df.columns if ('g' in col) and int(col[1:]) >= 2025]\n",
    "\n",
    "# create a subset of the dataframe with only the selected columns \n",
    "population_df_subset = population_df[columns_to_use]\n",
    "\n",
    "# visualize the subset \n",
    "print(population_df_subset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7864fcfc-8dba-4097-9868-ac471afe51ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[582.470517948718, 299.1756532067999, 182.90926371946165, 130.46352731715535, 93.02505120954125, 82.61130150526861, 69.49104142592705, 60.55255162571382, 42.1418712102316, 33.51233397439678, 30.11505302072583, 24.90690875235059, 22.997723327216264, 20.530218707983195, 17.802366219470247, 18.412032073147444, 15.49328601754386, 13.555521291337701, 13.143060054945055, 12.402484090909091, 10.297626300366304, 11.407322930957932, 8.777004125596626, 9.591557999459692, 9.471348099906631, 7.401656423021423, 7.160214083124478, 7.356277935430584, 6.940853068712334]\n"
     ]
    }
   ],
   "source": [
    "# create an empty list to store intertia (WCSS values)\n",
    "inertia_values = []\n",
    "\n",
    "# iterate through possible values of k 2-30\n",
    "for k in range(2, 31):\n",
    "    kmeans = KMeans(n_clusters=k, n_init='auto')\n",
    "    kmeans.fit(population_df_subset)\n",
    "\n",
    "    inertia_values.append(kmeans.inertia_)\n",
    "\n",
    "print(inertia_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d74ee6b0-dff3-47de-afeb-059011a138b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "283.2948647419181\n",
      "116.26638948733824\n",
      "52.445736402306295\n",
      "37.43847610761411\n",
      "10.413749704272632\n",
      "13.120260079341563\n",
      "8.938489800213233\n",
      "18.41068041548222\n",
      "8.629537235834817\n",
      "3.3972809536709505\n",
      "5.208144268375243\n",
      "1.909185425134325\n",
      "2.4675046192330683\n",
      "2.727852488512948\n",
      "-0.6096658536771962\n",
      "2.9187460556035845\n",
      "1.937764726206158\n",
      "0.4124612363926463\n",
      "0.7405759640359637\n",
      "2.1048577905427877\n",
      "-1.1096966305916283\n",
      "2.6303188053613056\n",
      "-0.8145538738630655\n",
      "0.1202098995530605\n",
      "2.069691676885208\n",
      "0.2414423398969454\n",
      "-0.19606385230610623\n",
      "0.41542486671824985\n"
     ]
    }
   ],
   "source": [
    "# print the difference in inertia values between previous k values\n",
    "prev = inertia_values[0]\n",
    "for inertia in inertia_values[1:]:\n",
    "    print(prev - inertia)\n",
    "    prev = inertia"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5f6ec5ac-fd1d-47d9-a9e5-d1785a79754a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the inertia values to visualize\n",
    "plt.figure(figsize=(15, 6))\n",
    "plt.plot(range(2, 31), inertia_values, marker='o')\n",
    "plt.title('Population Growth Clustering - K-Means Inertia')\n",
    "plt.xlabel('Number of Clusters')\n",
    "plt.ylabel('Inertia (WCSS) Values')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "45467345-3ed4-433e-901b-e692d4945a98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=5, n_init=&#x27;auto&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=5, n_init=&#x27;auto&#x27;)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=5, n_init='auto')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# set optimal number of clusters to what you identified above\n",
    "k_optimal = 5\n",
    "kmeans = KMeans(n_clusters=k_optimal, n_init='auto')\n",
    "kmeans.fit(population_df_subset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "2c108c33-b7e5-4d1b-8065-abc9e0e59d29",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cluster 0:\n",
      "['Belize', 'Guatemala', 'Panama', 'Luxembourg', 'Tajikistan', 'Philippines', 'Brunei', 'Pakistan', 'Afghanistan', 'Papua New Guinea', 'Solomon Islands', 'Vanuatu', 'Iraq', 'Saudi Arabia', 'Israel', 'Jordan', 'Oman', 'Syria', 'Yemen', 'Egypt', 'Algeria', 'Burkina Faso', \"Côte d'Ivoire\", 'Gambia', 'Ghana', 'Liberia', 'Sierra Leone', 'Botswana', 'Central African Republic', 'Djibouti', 'Eritrea', 'Kenya', 'Madagascar', 'Malawi', 'Mauritania', 'Namibia', 'Rwanda', 'São Tomé and Principe', 'Zimbabwe']\n",
      "\n",
      "\n",
      "Cluster 1:\n",
      "['Puerto Rico', 'Greece', 'Bulgaria', 'Croatia', 'Estonia', 'Hungary', 'Latvia', 'Lithuania', 'Poland', 'Romania', 'Bosnia and Herzegovina', 'Serbia', 'Russia', 'Armenia', 'Belarus', 'Georgia', 'Moldova', 'Japan', 'Tonga']\n",
      "\n",
      "\n",
      "Cluster 2:\n",
      "['Canada', 'United States', 'Mexico', 'Antigua and Barbuda', 'Bahamas', 'Costa Rica', 'Dominican Republic', 'Haiti', 'Honduras', 'Nicaragua', 'Argentina', 'Brazil', 'Bolivia', 'Chile', 'Ecuador', 'Paraguay', 'Peru', 'Suriname', 'Venezuela', 'Ireland', 'Cyprus', 'Iceland', 'Norway', 'Switzerland', 'Kazakhstan', 'Kyrgyzstan', 'Turkmenistan', 'Uzbekistan', 'Macau', 'Mongolia', 'Cambodia', 'Indonesia', 'Malaysia', 'Myanmar', 'Vietnam', 'Laos', 'Singapore', 'Bangladesh', 'India', 'Bhutan', 'Nepal', 'Australia', 'New Zealand', 'Maldives', 'Samoa', 'Iran', 'Turkey', 'Bahrain', 'Kuwait', 'Lebanon', 'United Arab Emirates', 'Morocco', 'Libya', 'South Africa', 'Cabo Verde', 'Lesotho', 'Swaziland/Eswatini']\n",
      "\n",
      "\n",
      "Cluster 3:\n",
      "['Nigeria', 'Benin', 'Guinea', 'Guinea-Bissau', 'Mali', 'Niger', 'Senegal', 'Togo', 'Angola', 'Burundi', 'Cameroon', 'Chad', 'Democratic Republic of Congo', 'Equatorial Guinea', 'Ethiopia', 'Gabon', 'Mozambique', 'Republic of Congo', 'Sudan', 'Tanzania', 'Uganda', 'Zambia']\n",
      "\n",
      "\n",
      "Cluster 4:\n",
      "['Barbados', 'Cuba', 'Dominica', 'El Salvador', 'Grenada', 'Jamaica', 'St. Kitts Nevis', 'St. Lucia', 'St. Vincent Grenadines', 'Trinidad and Tobago', 'Colombia', 'Guyana', 'Uruguay', 'Austria', 'Belgium', 'Denmark', 'Finland', 'France', 'Germany', 'Italy', 'Netherlands', 'Portugal', 'Spain', 'Sweden', 'United Kingdom', 'Czech Republic', 'Malta', 'Slovakia', 'Slovenia', 'Albania', 'Macedonia, North', 'Ukraine', 'Azerbaijan', 'China', 'Korea', 'Taiwan', 'Thailand', 'Sri Lanka', 'Fiji', 'Qatar', 'Tunisia', 'Mauritius', 'Seychelles']\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# assign the cluster labels to a new column in the original dataframe \n",
    "population_df['Cluster'] = kmeans.labels_\n",
    "\n",
    "# print the countries in each cluster \n",
    "for i in range(k_optimal):\n",
    "    print(f\"Cluster {i}:\")\n",
    "    countries_in_cluster = population_df[population_df['Cluster'] == i].index.tolist()\n",
    "    print(countries_in_cluster)\n",
    "    print(\"\\n\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
